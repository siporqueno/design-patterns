Задание 1. Установить IBM Rational Software Architect Designer, Modelio Open Source
или другую схожую систему.

Установил Visual Paradigm.

Задание 2. Выбрать Архитектуру домашнего CRM или ERP приложения. Обосновать выбранное решение.

CRM система по контрагентам и товарам (далее "система").

На мой взгляд, система применима в частности как в домашнем хозяйстве, так и в малом бизнесе.
Учитывает не только товары и контрагентов, но и связи между ними: Связь (Activity) создается когда если данный контрагент
покупает/продает/потребляет/производит данный товар.

На основе таких связей система позволяет, в частности:
Вывести список товаров, которые покупает/продает/потребляет/производит данный контрагент.
Вывести список контрагентов, которые покупают/продают/потребляют/производят данный товар.

Система также, естественно, позволит:
Вывести список всех товаров, применить фильтры по названию и другие.
Вывести список всех контрагентов, применить фильтры по названию и другие.

При создании системы будут использованы следующие архитектуры:

Монолит
Такой проект проще разрабатывать так как это одно, а не несколько приложений и отлаживать (все логи в одном месте). Сначала не ожидается больших нагрузок и монолит выдержит.
Как прототип/макет системы для демонстрационных целей монолит годится.

Затем можно плавно переходить от монолита к сервисно-ориентированной архитектуре следующим образом:
1) Разделить проект на два модуля, бэкэнд и фронтэнд. Внедрить бэкэнд как зависимость во фронтэнд. Модули можно будет отдельно запускать и тестировать.
2) Убрать зависимость фронтэнда от бэкэнда, написать REST API для бэкэнда и слой сервиса во фронтэнде, который будет этот REST API потреблять.

Архитектура клиент/сервер
Такую систему проще всего реализовать как веб-приложение, которое использует архитектуру клиент/сервер.

Многослойная архитектура
Приложение состоит из трех слоев: репозитории, сервисы, контроллеры.
В сервисах, в частности, содержится логика фильтрации и пагинации.

Помещение контроллеров и сервисов в разные слои позволяет, в соответствии с шаблоном MVC, отделить контроллеры от модели.
Контроллеры работают с сервисами, а сервисы с моделью. Репозитории отвечают за отображение модели в базу
данных поэтому их тоже логично и естественно выделить в отдельный слой, отделив от бизнес-логики сервисов.

Проектирование на основе предметной области
ООП на Java хорошо сочетается с проектированием на основе предметной области. Кроме того, проектированием на основе предметной области, позволяет создавать самые сложные системы.


Дальнейшее развитие системы
1) Разработка возможности отправлять запросы на товар и котировки цены на товар. Котировка может быть, в том числе, отправлена в ответ на запрос на товар. Запрос на товар, может,
в том числе, быть отправлен в ответ на ранее присланную котировку.

2) Разработка возможности размещать заказы в ответ на ранее полученные котировки.

3) Разработка возможности получения/обогащения данных о том, какие товары покупает/продаёт контрагент на основе его заказов.
