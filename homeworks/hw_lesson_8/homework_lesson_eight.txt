Please find Homework of Lesson 8 in the following Pull Request:

https://github.com/siporqueno/cloud-storage/pull/13

It is the request to merge branch 'hw-architectures-lesson-eight' with branch 'main'.

My comments to it:

"All classes mentioned below are in the package server/src/main/java/com/porejemplo/nube/server/antipatterns/samples/

1. Class NettyServer demonstrates "Hard Code" antipattern. The values of StorageType and server port shall be obtained from config
file instead of hard coded literals.
2. Class UserDAOInMemory contains "Stub" antipattern as in HashMap (in memory) type of storage the methods connect() and disconnect()
of interface UserDAO are not necessary and, as a consequence, are left empty. In order to avoid this antipattern here the interface
UserDAO can be separated into two interfaces: UserMapper (method findUserByUserName() etc.) and ConnectionWrapper (methods connect()
and disconnect()).
3. Class UserDAOSQLiteWithUserMapper shows "Lasagna Code" antipattern. The method findUserByUsername(String username) just calls
such method of UserMapper class whereas the methods connect() and disconnect() can be moved to separate class wrapping just functinality
of connection and disconnection. It looks like that the layer realizing interface UserDao shall be just removed. The interface UserDAO
can be separated into two interfaces: UserMapper and ConnectionWrapper and the service layer will just call the layer realizing these
two interfaces directly, without Lasagna layer of UserDAO."

"Все классы, упомянутые ниже, находятся в пакете server/src/main/java/com/porejemplo/nube/server/antipatterns/samples/

1) Класс NettyServer демонстрирует антипаттерн "Жесткое кодирование". Значения StorageType и порт сервера должны читаться из
конфигурационного файла.
2) Класс UserDAOInMemory содержит антипаттерн "Заглушка" поскольку в источнике данных типа ХэшМапы "In memory" методы connect() и
disconnect() интерфейса UserDAO не нужны и, как следствие, оставлены пустыми. Чтобы избежать этого антипаттерна интерфейс UserDAO
может быть разделен на два интерфейса: UserMapper (метод findUserByUsername() и т.п.) и ConnectionWrapper (методы connect() и disconnect()).
3) Класс UserDAOSQLiteWithUserMapper - пример антипаттерна "Лазанья код". Его метод findUserByUsername(String username) просто вызывает
такой же метод класса UserMapper в то время, как методы connect() и disconnect() могут быть перенесены в отдельный класс, оборачивающий
только функционал соединения и рассоединения. Похоже, что слой, реализующий интерфейс UserDao должен быть просто удалён. Интерфейс UserDAO
может быть разделен на два: UserMapper и ConnectionWrapper. Сервисный слой будет напрямую обращаться к слою, реализующему эти два интерфейса
без слоя Лазаньи UserDAO".