Please find Homework of Lesson 7 in the following Pull Request:

https://github.com/siporqueno/cloud-storage/pull/12

It is the request to merge branch 'hw-architectures-lesson-seven' with branch 'main'.

My comments to it:

"1. Created file api.yaml describing REST API of admin service to manage users in cloud storage.
 2. Generated code (Controller etc.) using code generator in Idea based on the file api.yaml . Created mocks for return values.
 3. Tried it sending requests from Swagger UI. It works and returns the mocks as expected."

"Создал файл api.yaml со спецификацией OpenAPI для REST API админки управляющей пользователями в облачном хранилище.
При помощи немного поднастроенного (язык - spring, не java, три параметра для пакетов) генератора кода в Идее на основе api.yaml 
сгенерировал код (контроллер и т.д.). Создал моки для возвращаемых значений.
Испытал сгенерированное при помощи запросов из Swagger UI. Работает и возвращает ожидаемые моки.
Не понял, как в api.yaml описывать представления (View)".

Помимо экранов Михаила с урока (минуты так с 95й по 105ю урока) при создании api.yaml оказалось очень полезно читать спецификации по следующей ссылке https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md

Генератор конфигурировал по кнопочке с шестеренкой на страничке api.yaml вверху в Идее. Сделал скриншот настройки, он в папке урока (Edit_Swagger_Codegen_Configuration). При конфигурировании помогли следующие ссылки:
https://openapi-generator.tech/docs/generators/java/
https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator-maven-plugin.

Сгенерировал я с помощью другой кнопки в Идее (без шестерёнки) вверху слева на страничке api.yaml вверху в Идее. Из двух ссылок сверху я также понял, что сгенерировать код можно без Идеи, а с помощью Мавен плагина openapi-generator-maven-plugin .
